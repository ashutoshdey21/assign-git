ï What is a gitignore file and what should it include for a Java project?
ï What does fast-forward in Git mean?
ï Why should you have different branches?
ï In a project how many remote Git repositories do you usually have?What is a gitignore file and what should it include for a Java project?

A gitignore file specifies intentionally untracked files that Git should ignore. Files already tracked by Git are not affected; see the NOTES below for details.

Each line in a gitignore file specifies a pattern. When deciding whether to ignore a path, Git normally checks gitignore patterns from multiple sources, with the following order of precedence, from highest to lowest (within one level of precedence, the last matching pattern decides the outcome):

‚Ä¢Patterns read from the command line for those commands that support them.

‚Ä¢Patterns read from a .gitignore file in the same directory as the path, or in any parent directory, with patterns in the higher level files (up to the toplevel of the work tree) being overridden by those in lower level files down to the directory containing the file. These patterns match relative to the location of the .gitignore file. A project normally includes such .gitignore files in its repository, containing patterns for files generated as part of the project build.

‚Ä¢Patterns read from /info/exclude.

‚Ä¢Patterns read from the file specified by the configuration variable core.excludesFile.

Source: https://git-scm.com/docs/gitignore





For Java GitIgnore should include:
##############################
## Java
##############################
.mtj.tmp/
*.class
*.jar
*.war
*.ear
*.nar
hs_err_pid*

##############################
## Maven
##############################
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
.mvn/wrapper/maven-wrapper.jar

##############################
## Gradle
##############################
bin/
build/
.gradle
.gradletasknamecache
gradle-app.setting

##############################
## IntelliJ
##############################
out/
.idea/
.idea_modules/
*.iml
*.ipr
*.iws

##############################
## Eclipse
##############################
.settings/
bin/
tmp/
.metadata
.classpath
.project
*.tmp
*.bak
*.swp
*~.nib
local.properties
.loadpath

##############################
## NetBeans
##############################
nbproject/private/
build/
nbbuild/
dist/
nbdist/
nbactions.xml
nb-configuration.xml

##############################
## OS X
##############################
.DS_Store

Source: https://gist.githubusercontent.com/dedunumax/54e82214715e35439227/raw/2da243bcfb8ab3256abb638b2da722cc0ad781c6/.gitignore%2520Java






What does fast-forward in Git mean?

If Master has diverged since the feature branch was created, then merging the fea-ture branch into master will create a merge commit. This is a typical merge. What ºs a Fast Forward Merge?FeatureMasterIf Master has diverged since the feature branch was created, then merging the fea-ture branch into master will create a merge commit. This is a typical merge.Before MergeAfter MergeBefore MergeAfter MergeIf Master has not diverged, instead of creating a new commit, git will just point master to the latest commit of the feature branch.This is a ‚Äúfast forward.‚Äù 

Source: https://sandofsky.com/images/fast_forward.pdf







Why should you have different branches?

In every project, there are always multiple different contexts where work happens. Each feature, bugfix, experiment, or alternative of your product is actually a context of its own: it can be seen as its own topic, clearly separated from other topics.

This leaves you with an unlimited amount of different contexts. Most likely, you'll have at least one context for your main or production state, and another context for each feature, bugfix, experiment, etc.

Not working in clearly separated contexts will cause several problem. Hence, to find a way to deal with multiple contexts in a professional manner we need branches.

Source: https://www.git-tower.com/blog/understanding-branches-in-git/

In a project how many remote Git repositories do you usually have?

In a project we may usually have one remote git repository i.e. origin, in case the design of the project is such that it requires more remote repositories, we may create as may as required. This number should be kept to a minimal number and it is always suggested to have branches for development and other activities. We need to keep in mind that there will only one repository named origin.


 
